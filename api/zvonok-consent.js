// api/zvonok-consent.js
// Vercel Node.js Serverless Function

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST' && req.method !== 'GET') {
      return res.status(405).json({ error: 'method_not_allowed' });
    }

    const {
      WEBHOOK_TOKEN,
      SALEBOT_API_KEY,
      // –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp –Ω—É–∂–µ–Ω ID WA-–∫–∞–Ω–∞–ª–∞:
      SALEBOT_WA_BOT_ID, // ‚Üê –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º whatsapp_message
      // –¥–ª—è fallback —á–µ—Ä–µ–∑ –∑–∞–ø—É—Å–∫ —Å—Ö–µ–º—ã (whatsapp_callback) ‚Äî ID –±–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞:
      SALEBOT_BOT_ID,    // ‚Üê –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å
      DEFAULT_MESSAGE = '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –ü—Ä–∏—à–ª—é –¥–µ—Ç–∞–ª–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ —Å—é–¥–∞ üòä',
      FORCE_COUNTRY_CODE = '7',
    } = process.env;

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if (!WEBHOOK_TOKEN || !SALEBOT_API_KEY) {
      return res.status(500).json({ error: 'env_missing_base' });
    }
    const canWhatsappMessage = Boolean(SALEBOT_WA_BOT_ID);
    const canCallback = Boolean(SALEBOT_BOT_ID);

    // 1) –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º (?token=...)
    if (req.query?.token !== WEBHOOK_TOKEN) {
      return res.status(401).json({ error: 'invalid_token' });
    }

    // 2) –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ
    const raw = await readBody(req);

    // 3) –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ: JSON –∏–ª–∏ x-www-form-urlencoded; –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî fallback
    const ct = (req.headers['content-type'] || '').toLowerCase();
    let body = {};
    if (ct.includes('application/json')) {
      body = safeJson(raw);
    } else if (ct.includes('application/x-www-form-urlencoded')) {
      body = Object.fromEntries(new URLSearchParams(raw));
    } else {
      body = safeJson(raw);
      if (Object.keys(body).length === 0) body = { ...req.query };
    }

    // 4) –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ct_* –∏ fallback-–ø–æ–∏—Å–∫)
    let candidate =
      body.phone ||
      body.number ||
      body.client_phone ||
      body.abonent_number ||
      body.caller ||
      body.to ||
      body.ct_phone ||
      body.ct_phone8 ||
      body.ct_phone9 ||
      req.query.phone ||
      req.query.number ||
      req.query.client_phone ||
      req.query.abonent_number ||
      req.query.caller ||
      req.query.to ||
      req.query.ct_phone ||
      req.query.ct_phone8 ||
      req.query.ct_phone9 ||
      '';

    if (!candidate) {
      candidate =
        extractPhoneFromAny(body) ||
        extractPhoneFromAny(req.query) ||
        extractPhoneFromText(raw);
    }

    const phone = normalizePhone(candidate, FORCE_COUNTRY_CODE);

    // (–æ–ø—Ü.) —Ñ–∏–ª—å—Ç—Ä —Å–æ–≥–ª–∞—Å–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ: –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –Ω–µ "1", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    const button = (body.ct_button_num ?? req.query.ct_button_num)?.toString();
    if (button && button !== '1') {
      return res.status(200).json({ ok: true, skipped: 'button_not_1' });
    }

    if (!phone) {
      console.warn('phone_not_found', {
        query: req.query,
        ct,
        raw: raw?.slice?.(0, 512),
      });
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Zvonok –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª, –∏ –ª–æ–≥–∏—Ä—É–µ–º
      return res.status(200).json({ ok: true, skipped: 'phone_not_found' });
    }

    // 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ SaleBot: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É WA-—Å–æ–æ–±—â–µ–Ω–∏—è,
    //    –µ—Å–ª–∏ –Ω–µ—Ç SALEBOT_WA_BOT_ID –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî fallback –Ω–∞ whatsapp_callback (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω SALEBOT_BOT_ID)
    let lastResp = null;

    if (canWhatsappMessage) {
      const r = await sendToSalebotWhatsApp(phone, DEFAULT_MESSAGE);
      lastResp = { via: 'whatsapp_message', ...r };
      if (r.ok) {
        return res.status(200).json({
          ok: true,
          sent_to_salebot: phone,
          salebot_via: 'whatsapp_message',
          salebot_response: r.body,
        });
      }
      console.error('whatsapp_message failed', r.status, r.body);
      // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ fallback, –µ—Å–ª–∏ –º–æ–∂–Ω–æ
    }

    if (canCallback) {
      const r2 = await sendToSalebotCallback(phone, DEFAULT_MESSAGE);
      lastResp = { via: 'whatsapp_callback', ...r2 };
      if (r2.ok) {
        return res.status(200).json({
          ok: true,
          sent_to_salebot: phone,
          salebot_via: 'whatsapp_callback',
          salebot_response: r2.body,
        });
      }
      console.error('whatsapp_callback failed', r2.status, r2.body);
    }

    // –ï—Å–ª–∏ —Å—é–¥–∞ –¥–æ—à–ª–∏ ‚Äî –Ω–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    return res.status(502).json({
      error: 'salebot_failed',
      details: lastResp || { via: 'none', reason: 'no_available_method' },
    });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'internal' });
  }
}

/* ‚Äî‚Äî‚Äî helpers ‚Äî‚Äî‚Äî */

function safeJson(s) {
  try {
    return JSON.parse(s);
  } catch {
    return {};
  }
}

function safeParseJson(s) {
  try {
    return JSON.parse(s);
  } catch {
    return null;
  }
}

function normalizePhone(input, defaultCountry = '7') {
  if (!input) return '';
  const digits = String(input).replace(/[^\d]/g, '');

  // –†–§ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ–¥–ø—Ä–∞–≤—å –ø–æ–¥ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω):
  if (digits.length === 11 && digits.startsWith('8')) return `+7${digits.slice(1)}`;
  if (digits.length === 11 && digits.startsWith('7')) return `+${digits}`;
  if (digits.length === 10) return `+${defaultCountry}${digits}`;
  if (digits.length >= 11) return `+${digits}`; // —É–∂–µ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
  return '';
}

async function readBody(req) {
  if (req.method === 'GET') return '';
  return await new Promise((resolve, reject) => {
    let data = '';
    req.on('data', (c) => (data += c));
    req.on('end', () => resolve(data));
    req.on('error', reject);
  });
}

function extractPhoneFromAny(obj) {
  for (const v of Object.values(obj || {})) {
    if (typeof v === 'string') {
      const m = v.match(/\+?\d{10,15}/);
      if (m) return m[0];
    }
  }
  return '';
}

function extractPhoneFromText(s) {
  const m = String(s || '').match(/\+?\d{10,15}/);
  return m ? m[0] : '';
}

/* ‚Äî‚Äî‚Äî SaleBot calls ‚Äî‚Äî‚Äî */

async function sendToSalebotWhatsApp(phone, text) {
  const { SALEBOT_API_KEY, SALEBOT_WA_BOT_ID } = process.env;
  const url = `https://chatter.salebot.pro/api/${SALEBOT_API_KEY}/whatsapp_message`;

  const payload = {
    phone,                                // "+7..."
    text: text || '–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—Å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä ‚ú®',
    whatsapp_bot_id: Number(SALEBOT_WA_BOT_ID), // ID WA-–∫–∞–Ω–∞–ª–∞ –≤ Salebot
  };

  const resp = await fetch(url, {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify(payload),
  });

  const respText = await resp.text();
  return {
    ok: resp.ok,
    status: resp.status,
    body: safeParseJson(respText) ?? respText,
  };
}

async function sendToSalebotCallback(phone, text) {
  const { SALEBOT_API_KEY, SALEBOT_BOT_ID } = process.env;
  const url = `https://chatter.salebot.pro/api/${SALEBOT_API_KEY}/whatsapp_callback`;

  const payload = {
    phone,                                // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SaleBot –∂–¥—ë—Ç "phone"
    bot_id: Number(SALEBOT_BOT_ID),       // ID –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    message: text,
    resume_bot: true,                     // —Å–Ω–∏–º–µ—Ç —Å –ø–∞—É–∑—ã, –µ—Å–ª–∏ –±—ã–ª–∞
    source: 'zvonok-consent',
    ts: new Date().toISOString(),
  };

  const resp = await fetch(url, {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify(payload),
  });

  const respText = await resp.text();
  return {
    ok: resp.ok,
    status: resp.status,
    body: safeParseJson(respText) ?? respText,
  };
}
